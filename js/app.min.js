document.addEventListener("DOMContentLoaded", () => {
    // ================= MENU =================
    let bodyLockStatus = true;

    const bodyLockToggle = (delay = 500) => {
        document.documentElement.hasAttribute("data-fls-scrolllock") ? bodyUnlock(delay) : bodyLock(delay);
    };

    const bodyUnlock = (delay = 500) => {
        if (!bodyLockStatus) return;
        const elements = document.querySelectorAll("[data-fls-lp]");
        setTimeout(() => {
            elements.forEach((el) => (el.style.paddingRight = ""));
            document.body.style.paddingRight = "";
            document.documentElement.removeAttribute("data-fls-scrolllock");
        }, delay);
        bodyLockStatus = false;
        setTimeout(() => (bodyLockStatus = true), delay);
    };

    const bodyLock = (delay = 500) => {
        if (!bodyLockStatus) return;
        const elements = document.querySelectorAll("[data-fls-lp]");
        const padding = window.innerWidth - document.body.offsetWidth + "px";
        elements.forEach((el) => (el.style.paddingRight = padding));
        document.body.style.paddingRight = padding;
        document.documentElement.setAttribute("data-fls-scrolllock", "");
        bodyLockStatus = false;
        setTimeout(() => (bodyLockStatus = true), delay);
    };

    function menuInit() {
        document.addEventListener("click", (e) => {
            if (!bodyLockStatus) return;
            if (e.target.closest("[data-fls-menu]")) {
                bodyLockToggle();
                document.documentElement.toggleAttribute("data-fls-menu-open");
            }
        });
    }

    if (document.querySelector("[data-fls-menu]")) {
        window.addEventListener("load", menuInit);
    }

    // ================= SEARCH =================
    const searchBox = document.querySelector(".top-header__search-box");
    const searchBtn = document.querySelector(".top-header__search");
    const searchInput = document.querySelector(".top-header__input");
    const catalogItems = document.querySelectorAll(".catalog__item");

    if (searchBox) {
        const searchResultsContainer = document.createElement("div");
        searchResultsContainer.className = "search-results";
        searchBox.appendChild(searchResultsContainer);

        function searchProducts(query) {
            const q = query.toLowerCase();
            searchResultsContainer.innerHTML = "";
            let results = [];
            catalogItems.forEach((item) => {
                const titleEl = item.querySelector(".item-catalog__title");
                const priceEl = item.querySelector(".item-catalog__price span");
                if (!titleEl || !priceEl) return;
                const title = titleEl.textContent.trim().toLowerCase();
                const price = priceEl.textContent.trim();
                if (title.includes(q)) results.push({ title, price });
            });

            if (results.length > 0) {
                results.forEach((r) => {
                    const div = document.createElement("div");
                    div.className = "search-results__item";
                    div.textContent = `${r.title} - ${r.price} грн`;
                    searchResultsContainer.appendChild(div);
                });
                searchResultsContainer.classList.add("active");
            } else {
                searchResultsContainer.innerHTML = '<div class="search-results__item">Нічого не знайдено</div>';
                searchResultsContainer.classList.add("active");
            }
        }

        if (searchInput) {
            searchInput.addEventListener("input", () => {
                const value = searchInput.value.trim();
                value.length > 0 ? searchProducts(value) : searchResultsContainer.classList.remove("active");
            });
        }

        if (searchBtn) {
            searchBtn.addEventListener("click", (e) => {
                e.preventDefault();
                if (!searchBox.classList.contains("active")) {
                    searchBox.classList.add("active");
                    searchInput?.focus();
                } else if (searchInput && searchInput.value.trim() !== "") {
                    searchProducts(searchInput.value.trim());
                }
            });
        }

        document.addEventListener("click", (e) => {
            if (!searchBox.contains(e.target)) {
                searchBox.classList.remove("active");
                searchResultsContainer.classList.remove("active");
                if (searchInput) searchInput.value = "";
            }
        });
    }

    // ================= CART =================
    const cartBtn = document.querySelector(".cart-btn");
    const cartPopup = document.querySelector(".cart-popup");
    const cartClose = document.querySelector(".cart-popup__close");

    if (cartBtn && cartPopup) {
        cartBtn.addEventListener("click", () => cartPopup.classList.add("active"));
    }
    if (cartClose && cartPopup) {
        cartClose.addEventListener("click", () => cartPopup.classList.remove("active"));
    }
    window.addEventListener("click", (e) => {
        if (cartPopup && e.target === cartPopup) cartPopup.classList.remove("active");
    });

    let cart = JSON.parse(localStorage.getItem("cart")) || [];

    function bindRemoveButtons() {
        document.querySelectorAll(".remove-item").forEach((btn) => {
            btn.onclick = () => {
                cart = cart.filter((c) => c.id !== btn.dataset.id);
                localStorage.setItem("cart", JSON.stringify(cart));
                renderCartPopup();
            };
        });
    }

    function renderCartPopup() {
        const cartItemsContainer = document.querySelector(".cart-items");
        const cartTotal = document.querySelector(".cart-total");
        const cartCount = document.querySelector(".header__count");
        if (!cartItemsContainer) return;

        cartItemsContainer.innerHTML = "";
        if (cart.length === 0) {
            cartItemsContainer.innerHTML = "<p>Кошик порожній</p>";
            if (cartTotal) cartTotal.textContent = "Всього: 0 ₴";
            if (cartCount) cartCount.textContent = 0;
            return;
        }

        let totalPrice = 0;
        let totalCount = 0;
        cart.forEach((item) => {
            totalPrice += item.price * item.quantity;
            totalCount += item.quantity;
            const div = document.createElement("div");
            div.classList.add("cart-item");
            div.innerHTML = `
                <img src="${item.image}" alt="${item.title}" class="cart-item__img">
                <div class="cart-item__info">
                    <span class="cart-item__title">${item.title}</span>
                    <span class="cart-item__quantity">× ${item.quantity}</span>
                    <span class="cart-item__price">${item.price} ₴ / шт</span>
                </div>
                <strong class="cart-item__total">${item.price * item.quantity} ₴</strong>
                <button class="remove-item" data-id="${item.id}">✖</button>
            `;
            cartItemsContainer.appendChild(div);
        });

        if (cartTotal) cartTotal.textContent = `Всього: ${totalPrice} ₴`;
        if (cartCount) cartCount.textContent = totalCount;
        bindRemoveButtons();
    }

    renderCartPopup();

    document.addEventListener("click", (e) => {
        const btn = e.target.closest(".btn-buy, .add-to-cart");
        if (!btn) return;

        const priceValue = btn.dataset.price ? parseFloat(btn.dataset.price.replace(/\s/g, "")) : 0;
        const product = {
            id: btn.dataset.id,
            title: btn.dataset.title,
            price: priceValue,
            image: btn.dataset.image,
            quantity: 1,
        };
        const existing = cart.find((c) => c.id === product.id);
        if (existing) existing.quantity += 1;
        else cart.push(product);
        localStorage.setItem("cart", JSON.stringify(cart));
        renderCartPopup();
    });

    // ================= ORDER POPUP =================
    const orderPopup = document.querySelector(".order-popup");
    const orderItemsContainer = document.querySelector(".order-items");
    const orderTotalEl = document.querySelector(".order-total__sum");
    const orderConfirmBtn = document.querySelector(".order-confirm");
    const orderCloseBtn = document.querySelector(".order-popup__close");
    const orderForm = document.querySelector(".order-form");

    if (orderCloseBtn && orderPopup) {
        orderCloseBtn.addEventListener("click", () => orderPopup.classList.remove("open"));
    }

    const checkoutBtn = document.querySelector(".cart-checkout");
    if (checkoutBtn && orderPopup) {
        checkoutBtn.addEventListener("click", (e) => {
            e.preventDefault();
            renderOrderPopup(cart);
            orderPopup.classList.add("open");
        });
    }

    function renderOrderPopup(items) {
        if (!orderItemsContainer || !orderTotalEl) return;
        orderItemsContainer.innerHTML = "";
        let total = 0;
        items.forEach((i) => {
            total += i.price * i.quantity;
            const div = document.createElement("div");
            div.classList.add("order-item");
            div.style.cssText = "display:flex;align-items:center;margin-bottom:10px;";
            div.innerHTML = `
                <img src="${i.image}" alt="${
                i.title
            }" style="width:50px;height:50px;object-fit:cover;margin-right:10px;border-radius:5px;">
                <span style="flex:1;">${i.title} × ${i.quantity}</span>
                <strong>${i.price * i.quantity} ₴</strong>
            `;
            orderItemsContainer.appendChild(div);
        });
        orderTotalEl.textContent = `${total} ₴`;
    }

    if (orderConfirmBtn && orderForm && orderPopup) {
        orderConfirmBtn.addEventListener("click", () => {
            if (!orderForm.checkValidity()) {
                alert("Заповніть всі поля!");
                return;
            }
            alert("Дякуємо! Ваше замовлення прийнято.");
            orderPopup.classList.remove("open");
            orderForm.reset();
        });
    }

    // ================= DYNAMIC ADAPT =================
    class DynamicAdapt {
        constructor() {
            this.type = "max";
            this.init();
        }
        init() {
            this.objects = [];
            this.daClassname = "--dynamic";
            this.nodes = [...document.querySelectorAll("[data-fls-dynamic]")];
            this.nodes.forEach((el) => {
                const c = el.dataset.flsDynamic.trim().split(",");
                const o = {};
                o.element = el;
                o.parent = el.parentNode;
                o.destinationParent = (c[3] && el.closest(c[3].trim())) || document;
                const r = c[0] ? c[0].trim() : null;
                if (r) {
                    const s = o.destinationParent.querySelector(r);
                    s && (o.destination = s);
                }
                o.breakpoint = c[1] ? c[1].trim() : "767.98";
                o.place = c[2] ? c[2].trim() : "last";
                o.index = this.indexInParent(o.parent, o.element);
                this.objects.push(o);
            });
            this.arraySort(this.objects);
            this.mediaQueries = this.objects
                .map(({ breakpoint }) => `(${this.type}-width: ${breakpoint / 16}em),${breakpoint}`)
                .filter((e, t, c) => c.indexOf(e) === t);
            this.mediaQueries.forEach((e) => {
                const t = e.split(",");
                const c = window.matchMedia(t[0]);
                const o = t[1];
                const r = this.objects.filter((obj) => obj.breakpoint === o);
                c.addEventListener("change", () => this.mediaHandler(c, r));
                this.mediaHandler(c, r);
            });
        }
        mediaHandler(matchMedia, objects) {
            if (matchMedia.matches) {
                objects.forEach((obj) => obj.destination && this.moveTo(obj.place, obj.element, obj.destination));
            } else {
                objects.forEach(({ parent, element, index }) => {
                    element.classList.contains(this.daClassname) && this.moveBack(parent, element, index);
                });
            }
        }
        moveTo(place, element, destination) {
            element.classList.add(this.daClassname);
            const index = place === "last" || place === "first" ? place : parseInt(place, 10);
            if (index === "last" || index >= destination.children.length) destination.append(element);
            else if (index === "first") destination.prepend(element);
            else destination.children[index].before(element);
        }
        moveBack(parent, element, index) {
            element.classList.remove(this.daClassname);
            if (parent.children[index] !== undefined) parent.children[index].before(element);
            else parent.append(element);
        }
        indexInParent(parent, element) {
            return [...parent.children].indexOf(element);
        }
        arraySort(arr) {
            if (this.type === "min") arr.sort((a, b) => a.breakpoint - b.breakpoint);
            else arr.sort((a, b) => b.breakpoint - a.breakpoint);
        }
    }
    if (document.querySelector("[data-fls-dynamic]")) new DynamicAdapt();

    // ================= TABS =================
    document.querySelectorAll(".tab").forEach((tab) => {
        tab.addEventListener("click", () => {
            const id = tab.dataset.tab;
            document.querySelectorAll(".tab").forEach((t) => t.classList.remove("active"));
            document.querySelectorAll(".tab-pane").forEach((p) => p.classList.remove("active"));
            tab.classList.add("active");
            const pane = document.getElementById(id);
            if (pane) pane.classList.add("active");
        });
    });

    // ================= OPTIONS =================
    function activateOptions(selector) {
        document.querySelectorAll(selector).forEach((optionGroup) => {
            optionGroup.addEventListener("click", (e) => {
                if (e.target.tagName === "BUTTON") {
                    optionGroup.querySelectorAll("button").forEach((b) => b.classList.remove("active"));
                    e.target.classList.add("active");
                }
            });
        });
    }
    activateOptions(".option__colors");
    activateOptions(".option__sizes");

    // ================= PRODUCT IMAGE =================
    const mainImage = document.querySelector(".product__main img");
    const thumbs = document.querySelectorAll(".product__thumbs img");
    if (mainImage) {
        thumbs.forEach((thumb) => {
            thumb.addEventListener("click", () => {
                mainImage.src = thumb.src;
                thumbs.forEach((t) => t.classList.remove("active"));
                thumb.classList.add("active");
            });
        });
    }

    // ================= PAGINATION (Catalog) =================
    const catalogRow = document.querySelectorAll(".catalog__row .catalog__item");
    const catalogPagination = document.querySelector(".catalog__pagination");
    if (catalogRow.length && catalogPagination) {
        const perPage = 15;
        let currentPage = 1;
        const totalPages = Math.ceil(catalogRow.length / perPage);

        function showPage(page) {
            catalogRow.forEach((item, i) => {
                item.style.display = i >= (page - 1) * perPage && i < page * perPage ? "block" : "none";
            });
            catalogPagination.querySelectorAll(".pagination-btn").forEach((btn) => btn.classList.remove("active"));
            const activeBtn = catalogPagination.querySelector(`.pagination-btn[data-page="${page}"]`);
            if (activeBtn) activeBtn.classList.add("active");
        }

        function renderPagination() {
            catalogPagination.innerHTML = "";
            for (let i = 1; i <= totalPages; i++) {
                const btn = document.createElement("button");
                btn.className = "pagination-btn";
                if (i === currentPage) btn.classList.add("active");
                btn.dataset.page = i;
                btn.textContent = i;
                btn.addEventListener("click", () => {
                    currentPage = i;
                    showPage(currentPage);
                });
                catalogPagination.appendChild(btn);
            }
        }

        if (totalPages > 1) {
            renderPagination();
            showPage(currentPage);
        }
    }

    // ================= PAGINATION (Blog) =================
    const blogItems = document.querySelectorAll(".blog__row .blog__column");
    const blogPagination = document.querySelector(".blog__pagination");
    if (blogItems.length && blogPagination) {
        const perPage = 6;
        let currentPage = 1;
        const totalPages = Math.ceil(blogItems.length / perPage);

        function showPage(page) {
            blogItems.forEach((item, i) => {
                item.style.display = i >= (page - 1) * perPage && i < page * perPage ? "block" : "none";
            });
            blogPagination.querySelectorAll(".blog-pagination-btn").forEach((btn) => btn.classList.remove("active"));
            const activeBtn = blogPagination.querySelector(`.blog-pagination-btn[data-page="${page}"]`);
            if (activeBtn) activeBtn.classList.add("active");
        }

        function renderPagination() {
            blogPagination.innerHTML = "";
            for (let i = 1; i <= totalPages; i++) {
                const btn = document.createElement("button");
                btn.className = "blog-pagination-btn";
                if (i === currentPage) btn.classList.add("active");
                btn.dataset.page = i;
                btn.textContent = i;
                btn.addEventListener("click", () => {
                    currentPage = i;
                    showPage(currentPage);
                });
                blogPagination.appendChild(btn);
            }
        }

        if (totalPages > 1) {
            renderPagination();
            showPage(currentPage);
        }
    }

    // ================= CATALOG SORT & FILTER MODAL =================
    const catalogSort = document.querySelector(".catalog__sort");
    if (catalogSort) {
        catalogSort.addEventListener("click", () => catalogSort.classList.toggle("active"));
        document.addEventListener("click", (e) => {
            if (!catalogSort.contains(e.target)) catalogSort.classList.remove("active");
        });
    }

    const filterBtn = document.querySelector(".catalog__filter");
    const filterModal = document.querySelector(".catalog__filter-modal");
    const filterClose = document.querySelector(".catalog__filter-close");
    if (filterBtn && filterModal && filterClose) {
        filterBtn.addEventListener("click", () => {
            filterModal.classList.add("active");
            document.body.style.overflow = "hidden";
        });
        filterClose.addEventListener("click", () => {
            filterModal.classList.remove("active");
            document.body.style.overflow = "";
        });
    }
});
